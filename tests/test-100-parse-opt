#!/bin/bash
SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
# shellcheck disable=SC1090,SC1091
. "${SCRIPT_DIR}/../poshlib.sh" || exit 1
use strict
use utils
use fakehash
use parse-opt

#####
# Set defaults here e.g. via envars, config
#####

DEBUG=''
VERBOSE=''
FORCE=''
OUTPUT=''
INPUT=''

parse-opt.init

parse-opt.short "d::" "DEBUG=x y z"
parse-opt.short "v" "VERBOSE"
parse-opt.short "f" "FORCE"

parse-opt.long "output:" "OUTPUT"
parse-opt.long "input:" "INPUT"
parse-opt.long "verbose" "VERBOSE"
parse-opt.long "force" "FORCE"

fakehash.declare expected_output
fakehash.update expected_output ' ' ",,,,;"
fakehash.update expected_output 'foo bar wibble' ",,,,;foo bar wibble"
fakehash.update expected_output 'foo -d bar wibble' "x y z,,,,;foo bar wibble"
fakehash.update expected_output 'foo bar -d- wibble' "-,,,,;foo bar wibble"
fakehash.update expected_output 'foo -- bar -d- wibble' ",,,,;foo bar -d- wibble"
fakehash.update expected_output '--force' ",true,,,;"
fakehash.update expected_output '-f --no-force' ",false,,,;"
fakehash.update expected_output '--no-force -f' ",true,,,;"
fakehash.update expected_output '--output=- --input "--" ' ",,,-,--;"
fakehash.update expected_output '--output="A +" --input "a # c" ' ",,,A +,a # c;"
# This is intended to make the parser panic, but how to test it?
#fakehash.update expected_output '-f -x -d' ",true,,,;-f -x -d"

declare -a keys
fakehash.keys.read-a keys expected_output
for input in "${keys[@]}"; do
    eval "set -- $input"
    eval "$(parse-opt)"
#echo DEBUG: ${__fakehash_PO_SHORT_MAP_keys+"${__fakehash_PO_SHORT_MAP_keys[@]}"} >&2
#echo DEBUG: ${__fakehash_PO_LONG_MAP_keys+"${__fakehash_PO_LONG_MAP_keys[@]}"} >&2
    output="${DEBUG:-},${FORCE:-},${VERBOSE:-},${OUTPUT:-},${INPUT:-};$*"
    if [[ "$output" != "$(fakehash.get expected_output "$input")" ]]; then
        echo "Failed on low level test '$input'"
        echo "   expect '$(fakehash.get expected_output "$input")'"
        echo "      got '$output'"
    fi
    DEBUG='' FORCE='' VERBOSE='' OUTPUT='' INPUT=''
done

fakehash.unset expected_output

# Now do the same for parse-opt-simple

parse-opt.prefix "TEST_"
parse-opt.flags "Verbose fORce"
parse-opt.params OUTPUT input

fakehash.declare expected_output

fakehash.update expected_output ' ' ",,,,;"
fakehash.update expected_output 'foo bar wibble' ",,,,;foo bar wibble"
fakehash.update expected_output '--force' ",true,,,;"
fakehash.update expected_output '--force --no-force' ",false,,,;"
fakehash.update expected_output '--no-force --force' ",true,,,;"
fakehash.update expected_output '--output=- --input "--" ' ",,,-,--;"
fakehash.update expected_output '--output="A +" --input "a # c" ' ",,,A +,a # c;"

fakehash.keys.read-a keys expected_output
for input in "${keys[@]}"; do
    eval "set -- $input"
    eval "$(parse-opt-simple)"
    output=",${TEST_FORCE:-},${TEST_VERBOSE:-},${TEST_OUTPUT:-},${TEST_INPUT:-};$*"
    if [[ "$output" != "$(fakehash.get expected_output "$input")" ]]; then
        echo "Failed on simple test '$input'"
        echo "   expect '$(fakehash.get expected_output "$input")'"
        echo "      got '$output'"
    fi
    TEST_FORCE='' TEST_VERBOSE='' TEST_OUTPUT='' TEST_INPUT=''
done
