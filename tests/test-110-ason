#!/bin/bash

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
# shellcheck disable=SC1090,SC1091
. "$SCRIPT_DIR/../poshlib.sh" || exit 1
use strict
use utils
use ason
use ason/lowlevel

failure=0
fail() {
    echo "FAIL: $*"
    (( ++failure ))
}


# lowlevel test tests


__ason__is_plaintext_entity "$_PAD" || fail __ason__is_plaintext_entity
__ason__is_type_entity "$_TABLE" || fail __ason__is_type_entity
__ason__is_entity "$_UNDEF" || fail __ason__is_entity


# Constructor tests


[[ "$(__ason__wrap "  " )" == "$__AS__CAN  $__AS__EM" ]] \
    || fail "__ason__wrap"
[[ "$(__ason__unwrap "$(__ason__wrap '  ')")" == "  " ]] \
    || fail "__ason__unwrap 1"
[[ "$(__ason__unwrap "   $__AS__CAN foo bar $__AS__EM   ")" == " foo bar " ]] \
    || fail "__ason__unwrap 2"

testquote="${__AS__SOH}${_PAD}${__AS__US}${_QUOTE}${__AS__STX}\
${__AS__CAN}test${__AS__EM}${__AS__ETX}"
[[ $(_QUOTE "test") == "$testquote" ]] \
    || fail _QUOTE

testlist="${__AS__SOH}${_PAD}${__AS__US}${_LIST}${__AS__STX}\
${__AS__CAN}test 1${__AS__EM}${__AS__US}${__AS__CAN}${testquote}${__AS__EM}${__AS__ETX}"
[[ $(_LIST "test 1" "$testquote") == "$testlist" ]] \
    || fail _LIST

[[ $(_SPLIT , "foo,bar,,wibble") == $(_LIST "foo" "bar" "" "wibble" ) ]] \
    || fail _SPLIT

testdict="${__AS__SOH}${_PAD}${__AS__US}${_DICT}${__AS__STX}\
${__AS__CAN}test 1${__AS__EM}${__AS__US}${__AS__CAN}test 1${__AS__EM}${__AS__RS}\
${__AS__CAN}testquote${__AS__EM}${__AS__US}${__AS__CAN}${testquote}${__AS__EM}${__AS__ETX}"
[[ $(_DICT "$(_LIST "test 1" "testquote")" "$testlist") == "$testdict" ]] \
    || fail _DICT

unpadlist="${__AS__SOH}${_PAD}${__AS__US}${_LIST}${__AS__STX}
    ${__AS__CAN}test 1${__AS__EM}
    ${__AS__US}${_TRUE}${__AS__US}${__AS__ETX}"


### TODO: if the above contains $'\n', "_READ test 1" below fails unexpectedly.

# Metadata tests


testkeys="${__AS__SOH}${_PAD}${__AS__US}${_LIST}${__AS__STX}\
${__AS__CAN}${_PAD}${__AS__EM}${__AS__ETX}"
[[ $(__ason__get_header_keys "${testquote}") == "$testkeys" ]] \
    || fail __ason__get_header_keys

[[ $(__ason__get_header_value "${testquote}" "${_PAD}") == "$_QUOTE" ]] \
    || fail __ason__get_header_value

[[ $(_TYPE "${testquote}") == "$_QUOTE" ]] \
    || fail "_TYPE 1"

# intentional failure, force silence
[[ $(_TYPE "test" || true >/dev/null) == "$_UNDEF" ]] \
    || fail "_TYPE 2"

[[ $(_LENGTH "$(_LIST)") == "0" ]] \
    || fail "_LENGTH 0"
[[ $(_LENGTH "$(_LIST "$(_LIST)")") == "1" ]] \
    || fail "_LENGTH 1"
[[ $(_LENGTH "$testlist") == "2" ]] \
    || fail "_LENGTH 2"
[[ $(_LENGTH "$unpadlist") == "3" ]] \
    || fail "_LENGTH 3"


# lowlevel iterator tests


teststext="$testlist${__AS__US}$testquote"
[[ $(__ason__to_next "$__AS__US" "$testlist") == "$testlist" ]] \
    || fail "__ason__to_next 1"
[[ $(__ason__to_next "$__AS__US" "$teststext") == "$testlist" ]] \
    || fail "__ason__to_next 2"


# getter tests


[[ $(_REVEAL "${_PAD}${_ARRAY}foo${_QUOTE}${_UNDEF}") == \
    "\${_PAD}\${_ARRAY}foo\${_QUOTE}\${_UNDEF}" ]] \
        || fail "_REVEAL 1"
[[ $(_REVEAL "$testquote") == \
    "\${__AS__SOH}\${_PAD}\${__AS__US}\${_QUOTE}\${__AS__STX}\${__AS__CAN}test\${__AS__EM}\${__AS__ETX}" ]] \
        || fail "_REVEAL 3"

[[ $(_GET "$testlist" 0) == "$_UNDEF" ]] || fail "_GET 0"
[[ $(_GET "$testlist" 1) == "test 1" ]] || fail "_GET 1"
[[ $(_GET "$testlist" 2) == "$testquote" ]] || fail "_GET 2"
[[ $(_GET "$testlist" 3) == "$_UNDEF" ]] || fail "_GET 3"

[[ $(_GET "$unpadlist" 2) == "$_TRUE" ]] || fail "_GET _TRUE"
[[ $(_GET "$unpadlist" 3) == "" ]] || fail "_GET ''"

_READ list "$unpadlist"
# shellcheck disable=SC2154
[[ "${list[0]}" == "test 1" ]] || fail "_READ test 1"
[[ "${list[1]}" == "$_TRUE" ]] || fail "_READ _TRUE"
[[ "${list[2]}" == "" ]] || fail "_READ ''"
[[ "${list[3]-unset}" == "unset" ]] || fail "_READ unset"

testexplode="$(_LIST 1 $'a\nb' "$_TRUE" 4 "a b")"
_READ list "$testexplode"
count=0
for i in "${list[@]}"; do
    ((++count))
    [[ "$i" == "$count" || "$i" == $'a\nb' || "$i" == "a b" || "$i" == "$_TRUE" ]] \
        || fail "_READ loop $count $i"
done
[ "$count" == 5 ] || fail "_READ loop unexpectedly ran $count times"


exit "$failure"
