#!/bin/bash
# shellcheck disable=SC1090,SC1091
. "$(dirname "${BASH_SOURCE[0]}")/../poshlib.sh" || exit 1
use strict
use utils

# say
test="Hello \\n this should not be line broken"
if [ "$test" != "$(say "$test")" ]; then
    die 1 "failure in say"
fi

# warn
if [ "$test" != "$(warn "$test" 2>&1)" ]; then
    die 1 "failure in warn"
fi

# contains
contains wibble foo bar wibble

# error handling
tempfile=$(mktemp)
cat <<EOF >"$tempfile"
#!/bin/bash
. "$(dirname "${BASH_SOURCE[0]}")/../poshlib.sh" || exit 1
use strict
use utils
ls /FILEDOESNOTEXIST 2>/dev/null
EOF
ls /FILEDOESNOTEXIST 2>/dev/null || expected_error=$?
if [ "$expected_error" == 0 ]; then
    die 1 "failure in error handling: could not determine correct error code"
elif output=$(/bin/bash "$tempfile" 2>&1); then
    die 1 "failure in error handling: died with no error"
else
    if [ "$?" != "$expected_error" ]; then
	die 1 "failure in error handling: died with wrong error number (expected $expected_error)"
    fi
fi
if [ "$output" != "errexit $expected_error on line 4 $tempfile" ]; then
    die 1 "failure in error handling: died with wrong error message ($output)"
fi
rm "$tempfile"

# try/catch

fail() {
    return 1
}

fail-hard() {(
    exit 2
)}

e=
try fail
if ! catch e || [ "$e" != 1 ]; then
     die 1 "1 Failure in catch $e"
fi

e=
try fail-hard
if ! catch e || [ "$e" != 2 ]; then
    die 1 "2 Failure in catch $e"
fi

e=
try false
if ! catch e || [ "$e" != 1 ]; then
     die 1 "3 Failure in catch $e"
fi

e=
try true
if catch e; then
    die 1 "4 Failure in catch $e"
fi

e=
output=$( try echo "THIS SHOULD BE INVISIBLE" )
if catch e || [[ $output != "THIS SHOULD BE INVISIBLE" ]]; then
    die 1 "5 Failure in try $e; output=$output"
fi

# die
die 0 "" 2>/dev/null
